#!/usr/bin/env node

const config = require('../lib/config');
const moment = require('moment');
const inquirer = require('inquirer');
const fuzzy = require('fuzzy');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

// Handle command line options 
const minimist = require('minimist')
const argv = minimist(process.argv)
if (!config.API_TOKEN) {
	return;
}
const Toggle = require('../');
const toggle = new Toggle(config.API_TOKEN);
const colors = require('colors');
const args = process.argv.splice(2);
async function main() {
	let command = args[0];
	if (!command) {
		command = 'start';
	}
	switch (command) {
		case 'list-tags':
			const data = await toggle.getTags();
			data.forEach((data) => {
				console.log(`- ${data.name} (${data.id})`)
			})
			break;
		case 'stop':
			try {
				const entry = await toggle.stop();
				const desc = entry.description ? entry.description.cyan.bold : '(no description)'.yellow;
				console.log(['entry', desc, 'successfully', 'stopped'.red.bold].join(' '));
				const start = moment(entry.start);
				const stop = moment(entry.stop);
				console.log(['time:', start.from(stop, true)].join(' '));
			} catch (err) {
				console.log(error.message.red);
			} finally {
				break;
			}
		case 'start':
		default:
			let name = [];
			if (command && command != 'start') {
				name = [command];
				command = 'start';
			}
			let i = 1;

			while (args[i]) {
				name.push(args[i++]);
			}

			name = name.length === 0 ? undefined : name.join(' ');
			const targetProject = await getProjectForEntry();
			await toggle.start(name, targetProject.id)
			name = name ? name.cyan.bold : '(no description)'.yellow.bold;
			name = `( Project ${targetProject.name})`
			console.log(['entry', name, 'successfully', 'started'.green].join(' '));
			break;
	}

}

async function getProjectForEntry() {
	const projects = await toggle.getProjects();
	const choices = projects.map((p) => {
		return p.name
	});
	//console.log(projects);
	const answers = await inquirer.prompt([
		{
			type: 'autocomplete',
			name: 'project',
			suggestOnly: true,
			message: 'Please choose a project',
			emptyText: 'Nothing found!',
			source: async (answers, input) => {
				input = input || '';
				const fuzzyResult = fuzzy.filter(input, choices)
				return fuzzyResult.map(el => el.original)
			},
			pageSize: 10,
			validate: function (val) {
				return val ? true : 'Type something!';
			},
		}
	])
	const selectedProject = answers.project;
	if (choices.includes(selectedProject)) {
		return projects.find((p) => {
			return p.name === selectedProject
		})
	} else {
		const res = await toggle.createProject(selectedProject);
		return res;
	}
	return;
}
main();