#!/usr/bin/env node

const config = require('../lib/config');
const moment = require('moment');
const inquirer = require('inquirer');
const fuzzy = require('fuzzy');
const printHelp = require('../lib/commands/help')

inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

// Handle command line options 
const minimist = require('minimist')
const argv = minimist(process.argv.slice(2))
if (!config.API_TOKEN) {
	return;
}
const Toggle = require('../');
const toggle = new Toggle(config.API_TOKEN);
const colors = require('colors');
async function main() {
	let command = argv._[0];
	if (argv.h || argv.help) {
		command = 'help'
	} else {

		if (!command) {
			command = 'start';
		}
	}

	switch (command) {
		case 'help':
			printHelp();
			break;
		case 'list-tags':
			const data = await toggle.getTags();
			data.forEach((data) => {
				console.log(`- ${data.name} (${data.id})`)
			})
			break;
		case 'status':
			const entry = await toggle.getEntry();
			if (entry) {
				const duration = getDuration(entry.start, entry.stop);
				console.log(`${entry.description.cyan.bold} in progress for ${duration}`.green)
			} else {
				console.log(`No entry in progess`.red);
			}
			break;
		case 'stop':
			try {
				const entry = await toggle.stop();
				if (!entry) {
					console.log(`No entry in progess`.red);
					return;
				}
				const desc = entry.description ? entry.description.cyan.bold : '(no description)'.yellow;
				console.log(['entry', desc, 'successfully', 'stopped'.red.bold].join(' '));
				const duration = getDuration(entry.start, entry.stop);
				console.log(`time: ${duration}`);
			} catch (err) {
				console.log(error.message.red);
			} finally {
				break;
			}
		case 'start':
		default:
			let name = [];
			if (command && command != 'start') {
				name = [command];
				command = 'start';
			} else {
				argv._.shift();
			}
			name = argv._.join(' ')
			let consoleName = name ? name.cyan.bold : '(no description)'.yellow.bold;

			// Handle time entry options
			const startOptions = {}
			if (argv.t) {
				startOptions.tags = parseTags(argv.t);

			}
			if (!argv.t || argv.p) {
				const targetProject = await getProjectForEntry();
				consoleName += ` (Project ${targetProject.name})`.yellow
				startOptions.pid = targetProject.id
			}
			await toggle.start(name, startOptions)

			console.log(['entry', consoleName, 'successfully', 'started'.green].join(' '));
			break;
	}

}

async function getProjectForEntry() {
	const projects = await toggle.getProjects();
	const choices = projects.map((p) => {
		return p.name
	});
	//console.log(projects);
	const answers = await inquirer.prompt([
		{
			type: 'autocomplete',
			name: 'project',
			suggestOnly: true,
			message: 'Please choose a project',
			emptyText: 'Nothing found!',
			source: async (answers, input) => {
				input = input || '';
				const fuzzyResult = fuzzy.filter(input, choices)
				return fuzzyResult.map(el => el.original)
			},
			pageSize: 10,
			validate: function (val) {
				return val ? true : 'Type something!';
			},
		}
	])
	const selectedProject = answers.project;
	if (choices.includes(selectedProject)) {
		return projects.find((p) => {
			return p.name === selectedProject
		})
	} else {
		const res = await toggle.createProject(selectedProject);
		return res;
	}
	return;
}

function parseTags(tagString) {
	const s = new Set(tagString.split(',').map(t => t.trim()))
	return [...s]
}

function getDuration(start, stop) {
	return moment(start).from(moment(stop), true);
}
main();